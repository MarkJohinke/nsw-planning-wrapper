From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
Subject: Add NSW Planning API + health/info probes + basic results UI (App Router)

---
 app/api/health/route.ts                      |  10 +++++
 app/api/info/route.ts                        |  12 ++++++
 app/api/nswPlanningAtPoint/route.ts          | 120 +++++++++++++++++++++++++++
 app/results/page.tsx                          | 120 +++++++++++++++++++++++++++
 4 files changed, 262 insertions(+)
 create mode 100644 app/api/health/route.ts
 create mode 100644 app/api/info/route.ts
 create mode 100644 app/api/nswPlanningAtPoint/route.ts
 create mode 100644 app/results/page.tsx

diff --git a/app/api/health/route.ts b/app/api/health/route.ts
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/app/api/health/route.ts
@@
+// app/api/health/route.ts
+export const runtime = 'nodejs';
+export async function GET() {
+  return new Response(
+    JSON.stringify({ ok: true, time: new Date().toISOString() }),
+    { headers: { 'content-type': 'application/json' } }
+  );
+}

diff --git a/app/api/info/route.ts b/app/api/info/route.ts
new file mode 100644
index 0000000..2222222
--- /dev/null
+++ b/app/api/info/route.ts
@@
+// app/api/info/route.ts
+export const runtime = 'nodejs';
+export async function GET() {
+  return new Response(JSON.stringify({
+    ok: true,
+    url: process.env.VERCEL_URL,
+    env: process.env.NODE_ENV,
+    sha: process.env.VERCEL_GIT_COMMIT_SHA ?? null
+  }), { headers: { 'content-type': 'application/json' }});
+}

diff --git a/app/api/nswPlanningAtPoint/route.ts b/app/api/nswPlanningAtPoint/route.ts
new file mode 100644
index 0000000..3333333
--- /dev/null
+++ b/app/api/nswPlanningAtPoint/route.ts
@@
+// app/api/nswPlanningAtPoint/route.ts
+// Stable Node runtime while debugging (avoid Edge incompatibilities)
+export const runtime = 'nodejs';
+
+type Overlays = { bushfire?: string|null; flood?: string|null; heritage?: string|null; easements?: string|null; [k:string]: any };
+type SeppRuleResult = { label: string; pass: boolean; details?: string };
+type SeppCompliance = { Duplex?: SeppRuleResult[]; Townhouse?: SeppRuleResult[]; Manor?: SeppRuleResult[]; RFB?: SeppRuleResult[] };
+type FeasibilityRow = { option: string; gdv?: number; build_cost?: number; margin?: number; margin_pct?: number; notes?: string };
+
+const POINT_URL = "https://point.digital.nsw.gov.au/v3/lookup";
+const POINT_API_KEY = process.env.POINT_API_KEY;
+
+function badRequest(msg: string) {
+  return new Response(JSON.stringify({ ok:false, error: msg }), { status:400, headers:{'content-type':'application/json'}});
+}
+function serverError(msg: string, extra?: any) {
+  console.error('SERVER_ERROR', msg, extra??'');
+  return new Response(JSON.stringify({ ok:false, error: msg }), { status:500, headers:{'content-type':'application/json'}});
+}
+
+export async function GET(req: Request) {
+  try {
+    const { searchParams } = new URL(req.url);
+    const lat = searchParams.get('lat');
+    const lon = searchParams.get('lon');
+    const address = searchParams.get('address') ?? '';
+    if (!lat || !lon) return badRequest('lat/lon required');
+    const latNum = Number(lat), lonNum = Number(lon);
+    if (Number.isNaN(latNum) || Number.isNaN(lonNum)) return badRequest('lat/lon must be numbers');
+
+    if (!POINT_API_KEY) return serverError('server misconfig: POINT_API_KEY missing');
+
+    // Upstream NSW Point call (adjust field paths as you confirm the response)
+    const url = `${POINT_URL}?lat=${encodeURIComponent(lat)}&lon=${encodeURIComponent(lon)}`;
+    const r = await fetch(url, { headers: { 'x-api-key': POINT_API_KEY }});
+    if (!r.ok) {
+      const text = await r.text();
+      return new Response(JSON.stringify({ ok:false, error:'upstream error', status:r.status, body:text }), { status:502, headers:{'content-type':'application/json'}});
+    }
+    const raw = await r.json();
+
+    const zoning = raw?.planning?.zoning ?? null;
+    const fsr   = raw?.planning?.fsr ?? null;
+    const hob   = raw?.planning?.hob ?? null;
+
+    const overlays: Overlays = {
+      bushfire:  raw?.hazards?.bushfire ?? null,
+      flood:     raw?.hazards?.flood ?? null,
+      heritage:  raw?.heritage ?? null,
+      easements: raw?.cadastral?.easements ?? null,
+    };
+
+    // Placeholders: swap in your real SEPP/ADG checks
+    const sepp_compliance: SeppCompliance = {
+      Duplex:    [{ label:'Front setback meets control', pass:true,  details:'placeholder' }],
+      Townhouse: [{ label:'Landscaping % achieved',      pass:false, details:'calc pending' }],
+      Manor:     [{ label:'Solar access 2hrs',           pass:false }],
+      RFB:       [{ label:'ADG 3F-1 separation',         pass:false }, { label:'Rear setback ≥ 6m', pass:false }],
+    };
+
+    const feasibility: FeasibilityRow[] = [
+      { option:'Duplex', notes:'placeholder' },
+      { option:'RFB 3F', notes:'placeholder' },
+    ];
+
+    const payload = {
+      ok: true,
+      address: address || raw?.address?.fullAddress || 'Address TBC',
+      coords: { lat: latNum, lon: lonNum },
+      zoning, fsr, hob,
+      overlays,
+      sepp_compliance,
+      feasibility,
+      recommendations: [
+        'Obtain survey for precise setbacks/width/depth',
+        'Run LMR/Housing SEPP variant with measured site geometry',
+        'Confirm overlays with council GIS'
+      ],
+      overall_recommendation: 'Further due diligence',
+      diagnostics: { upstream_sample: raw?.address ? { address: raw.address } : raw },
+    };
+
+    return new Response(JSON.stringify(payload), { headers:{'content-type':'application/json'}});
+  } catch (e:any) {
+    return serverError('handler crash', e?.stack || e);
+  }
+}
+
diff --git a/app/results/page.tsx b/app/results/page.tsx
new file mode 100644
index 0000000..4444444
--- /dev/null
+++ b/app/results/page.tsx
@@
+// app/results/page.tsx
+'use client';
+import { useState } from 'react';
+
+export default function Results() {
+  const [lat, setLat] = useState('-33.8688');
+  const [lon, setLon] = useState('151.2093');
+  const [data, setData] = useState<any>(null);
+  const [loading, setLoading] = useState(false);
+
+  const run = async () => {
+    setLoading(true);
+    const r = await fetch(`/api/nswPlanningAtPoint?lat=${lat}&lon=${lon}`);
+    const j = await r.json();
+    setData(j);
+    setLoading(false);
+  };
+
+  return (
+    <div className="p-6 space-y-4">
+      <h1 className="text-2xl font-semibold">NSW Planning Report</h1>
+
+      <div className="flex gap-2">
+        <input className="border p-2 rounded" value={lat} onChange={e=>setLat(e.target.value)} placeholder="lat"/>
+        <input className="border p-2 rounded" value={lon} onChange={e=>setLon(e.target.value)} placeholder="lon"/>
+        <button className="px-4 py-2 rounded bg-black text-white" onClick={run} disabled={loading}>
+          {loading ? 'Loading…' : 'Run'}
+        </button>
+      </div>
+
+      {data && data.ok && (
+        <div className="grid md:grid-cols-2 gap-4">
+          <section className="p-4 rounded border">
+            <h2 className="font-medium mb-2">Core Controls</h2>
+            <ul className="space-y-1 text-sm">
+              <li><b>Address:</b> {data.address}</li>
+              <li><b>Zoning:</b> {String(data.zoning ?? '—')}</li>
+              <li><b>FSR:</b> {String(data.fsr ?? '—')}</li>
+              <li><b>HOB:</b> {String(data.hob ?? '—')}</li>
+            </ul>
+          </section>
+
+          <section className="p-4 rounded border">
+            <h2 className="font-medium mb-2">Overlays</h2>
+            <ul className="text-sm">
+              {Object.entries(data.overlays || {}).map(([k,v]) => (
+                <li key={k}><b>{k}:</b> {String(v ?? '—')}</li>
+              ))}
+            </ul>
+          </section>
+
+          <section className="p-4 rounded border md:col-span-2">
+            <h2 className="font-medium mb-2">SEPP Compliance</h2>
+            <div className="grid md:grid-cols-2 gap-3">
+              {Object.entries(data.sepp_compliance || {}).map(([typology, rules]: any) => (
+                <div key={typology} className="border rounded p-3">
+                  <div className="font-medium mb-1">{typology}</div>
+                  <ul className="text-sm space-y-1">
+                    {rules?.map((r:any, i:number) => (
+                      <li key={i}>{r.pass ? '✅' : '❌'} {r.label} {r.details ? `(${r.details})` : ''}</li>
+                    ))}
+                  </ul>
+                </div>
+              ))}
+            </div>
+          </section>
+
+          <section className="p-4 rounded border md:col-span-2">
+            <h2 className="font-medium mb-2">Feasibility</h2>
+            <table className="text-sm w-full border-collapse">
+              <thead>
+                <tr className="border-b">
+                  <th className="text-left p-2">Option</th>
+                  <th className="text-left p-2">GDV</th>
+                  <th className="text-left p-2">Build Cost</th>
+                  <th className="text-left p-2">Margin</th>
+                  <th className="text-left p-2">%</th>
+                  <th className="text-left p-2">Notes</th>
+                </tr>
+              </thead>
+              <tbody>
+                {(data.feasibility || []).map((row:any, i:number)=>(
+                  <tr key={i} className="border-b">
+                    <td className="p-2">{row.option}</td>
+                    <td className="p-2">{String(row.gdv ?? '—')}</td>
+                    <td className="p-2">{String(row.build_cost ?? '—')}</td>
+                    <td className="p-2">{String(row.margin ?? '—')}</td>
+                    <td className="p-2">{String(row.margin_pct ?? '—')}</td>
+                    <td className="p-2">{row.notes ?? ''}</td>
+                  </tr>
+                ))}
+              </tbody>
+            </table>
+          </section>
+        </div>
+      )}
+
+      {data && !data.ok && (
+        <pre className="p-3 bg-red-50 border text-xs">{JSON.stringify(data, null, 2)}</pre>
+      )}
+    </div>
+  );
+}
